---
import i18next, { t } from "i18next"
import { getImage } from "@astrojs/image"
import { localizePath } from "astro-i18next"
import Aside from "@web/components/aside/Aside.astro"
import Heading from "@web/components/aside/Heading.astro"
import getCharactersInfo from "@server/actions/GetCharactersInfo"

export interface Props { info: { characters: Array<{name: string, image: string}>} }
const { info } = Astro.props
const characters = info.characters.slice(0, 3)

for (const character of characters) {
	const { src } = await getImage({
		src: character.image,
		width: "111",
		height: "111",
		format: "webp"
	})
	character.portrait = src
}

const { src: shadowed } = await getImage({src: "/images/shadowed.png", width: "111", height: "111", format: "webp"})
---
<Aside grid-area="characters" aria-label={t("landmarks.characters")} class="aside-characters">
	<Heading>{t("strip.characters")}</Heading>
	<div class="characters">
		{
			characters.map((character) => (
				<div class="character">
					<img src={character.portrait} alt="" />
					<span>{character.name}</span>
				</div>
			))
		}
		{
			[...Array(3 - characters.length)].map(() => (
				<div class="character no-one">
					<img src={shadowed} alt=""/>
				</div>
			))
		}
	</div>
</Aside>
<style>
	:global(.aside-characters) {
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		gap: 1.5rem;
	}

	.character {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: .5rem;

		color: var(--color-text-aside);
	}

	img {
		width: 7rem;
		aspect-ratio: 1/1;
		border-radius: 50%;
	}

	span {
		font-family: var(--font-family-text);
		font-size: 1rem;
	}

	.characters {
		display: flex;
		flex-direction: column;
		justify-content: space-around;
		flex-grow: 1;
	}

	@media (max-width: 60em) {
		.characters {
			flex-direction: row;
		}

		img {
			width: 4.5rem;
		}

		.no-one {
			display: none;
		}
	}
</style>
